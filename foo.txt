

//=================================================================
// ViewShaderData2.glsl    
//   v1.0  2017-04-11  initial release
//                     !!! BUGS: integer and float conversion displays 
//                               wrong values in some cases !!! 
//   v1.1  2017-04-12  char() corrections
//                     convertion routines corrected by Timo Kinnunen!  
//   v1.2  2018-01-07  display WebGL version
//   v1.3  2019-05-25  key input added
//   v1.4  2019-05-25  corrections from FabriceNeyret2
//   v1.5  2020-12-28  correction because of iMouse data changes!
//         2020-12-28  working on...
//
// Display shader data:  
//   date, time, frameCount, runtime, fps, resolution & mouse positions.
// Click and Drag mouse button to display last & current mouse position.
// Press keys to show current pressed key values.
// Use Ctrl-mousewheel to change resolution.
// Press Alt-CursorDown to reset time & Alt-CursorUp to toggle pause.
//
// This release 2 uses the font texture to display integer and float values.
// useful shader infos:
//         font:  https://www.shadertoy.com/view/MtVXRd
//      numbers:  https://www.shadertoy.com/view/llySRh
//    version 1:  https://www.shadertoy.com/view/llcXDn
//    KeyTester:  https://www.shadertoy.com/view/llVSRm
// KeyTester v2:  https://www.shadertoy.com/view/XsycWw
// shaderValues:  https://www.shadertoy.com/view/llySRh
//   nice watch:  https://www.shadertoy.com/view/lsXGz8
// https://shadertoyunofficial.wordpress.com/2016/07/20/special-shadertoy-features/
//=================================================================

//== key handling ===


//== font handling ==


vec2 uv = vec2(0.0);  // -1 .. 1

vec2 tp = vec2(0.0);  // text position

//--- access font image of ascii code characters ---







//---------------------------------------------------------
// return font image intensity of character ch at text position tp
//---------------------------------------------------------

float char(int ch)    // old versions
{ vec4 f = texture(iChannel2,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,15.999-float(ch)/16.))/16.));
  return f.x * (f.y+0.3)*(f.z+0.3)*2.0;   // 3d
}
//  vec4 f = texture(iChannel2,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,16.-(1e-6)-floor(ch)/16.))/16.));  

/*
float char(int ch)    // new version
{
  vec4 f = any(lessThan(vec4(tp,1,1), vec4(0,0,tp))) 
               ? vec4(0) 
               : texture(iChannel2,0.0625*(tp + vec2(ch - ch/16*16,15 - ch/16)));  
//  if (iMouse.z > 0.0) return f.x; else   // 2d
  return f.x * (f.y+0.3)*(f.z+0.3)*2.0;   // 3d
}
*/

//----------------------------------------------------------------
// set text starting position to x=line, y=column (left/top = 1,1) 
//----------------------------------------------------------------
void SetTextPosition(float x, float y)  //
{
  tp = 10.0*uv;
  tp.x = tp.x +17. - x;
  tp.y = tp.y -9.4 + y;
}

//== value drawings =======================================

//--- display number fraction with leading zeros --- 
float drawFract(float value, int digits)
{ 
  float c = 0.0;
  value = fract(value) * 10.0;
  for (int ni = 1; ni < 60; ni++) 
  {
    c += char(48 + int(value)); // add 0..9
    tp.x -= 0.5;
    digits -= 1;
    value = fract(value) * 10.0;
    if (digits <= 0 || value == 0.0) break;
  } 
  tp.x -= 0.5*float(digits);
  return c;
}
                                                                                                             
//--- display integer value --- 
int maxInt(int a, int b) { return a>b?a:b;}  // to run on iPad

//--- display integer value --- 
float drawInt(int value, int minDigits)
{
  float c = 0.;
  if (value < 0) 
  { value = -value;
    if (minDigits < 1) minDigits = 1;
    else minDigits--;
    S(45);   // -                   // add minus char
  } 
  int fn = value, digits = 1; // get number of digits 
  for (int ni=0; ni<10; ni++)
  {
    fn /= 10;
    if (fn == 0) break;
    digits++;
  } 
  digits = maxInt(minDigits, digits);   // WebGL
//digits = max(minDigits, digits);      // WebGL2
  tp.x -= 0.5 * float(digits);
  for (int ni=1; ni < 11; ni++) 
  { 
    tp.x += 0.5; // space
    c += char(48 + value%10);
    value /= 10; // add 0..9 
    if (ni >= digits) break;
  } 
  tp.x -= 0.5 * float(digits);
  return c;
}


